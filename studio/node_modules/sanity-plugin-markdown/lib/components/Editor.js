"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactMde = _interopRequireDefault(require("react-mde"));

var _reactMarkdown = _interopRequireDefault(require("react-markdown"));

var _remarkGfm = _interopRequireDefault(require("remark-gfm"));

var _autoId = require("@reach/auto-id");

var _patchEvent = _interopRequireWildcard(require("part:@sanity/form-builder/patch-event"));

var _client = _interopRequireDefault(require("part:@sanity/base/client"));

var _components = require("@sanity/base/components");

var _useDebounce = _interopRequireDefault(require("../hooks/useDebounce"));

require("react-mde/lib/styles/css/react-mde-all.css?raw");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _awaitAsyncGenerator(value) { return new _AwaitValue(value); }

function _wrapAsyncGenerator(fn) { return function () { return new _AsyncGenerator(fn.apply(this, arguments)); }; }

function _AsyncGenerator(gen) { var front, back; function send(key, arg) { return new Promise(function (resolve, reject) { var request = { key: key, arg: arg, resolve: resolve, reject: reject, next: null }; if (back) { back = back.next = request; } else { front = back = request; resume(key, arg); } }); } function resume(key, arg) { try { var result = gen[key](arg); var value = result.value; var wrappedAwait = value instanceof _AwaitValue; Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) { if (wrappedAwait) { resume(key === "return" ? "return" : "next", arg); return; } settle(result.done ? "return" : "normal", arg); }, function (err) { resume("throw", err); }); } catch (err) { settle("throw", err); } } function settle(type, value) { switch (type) { case "return": front.resolve({ value: value, done: true }); break; case "throw": front.reject(value); break; default: front.resolve({ value: value, done: false }); break; } front = front.next; if (front) { resume(front.key, front.arg); } else { back = null; } } this._invoke = send; if (typeof gen.return !== "function") { this.return = undefined; } }

_AsyncGenerator.prototype[typeof Symbol === "function" && Symbol.asyncIterator || "@@asyncIterator"] = function () { return this; };

_AsyncGenerator.prototype.next = function (arg) { return this._invoke("next", arg); };

_AsyncGenerator.prototype.throw = function (arg) { return this._invoke("throw", arg); };

_AsyncGenerator.prototype.return = function (arg) { return this._invoke("return", arg); };

function _AwaitValue(value) { this.wrapped = value; }

var Preview = _ref2 => {
  var markdown = _ref2.markdown;
  return /*#__PURE__*/React.createElement(_reactMarkdown.default, {
    plugins: [_remarkGfm.default]
  }, markdown);
};

var defaultToolbarCommands = [['header', 'bold', 'italic', 'strikethrough'], ['link', 'quote', 'code'], ['unordered-list', 'ordered-list', 'checked-list']];

var _default = /*#__PURE__*/React.forwardRef(function MarkdownEditor(props, ref) {
  var type = props.type,
      _props$value = props.value,
      value = _props$value === void 0 ? '' : _props$value,
      markers = props.markers,
      onBlur = props.onBlur,
      onChange = props.onChange,
      onFocus = props.onFocus,
      presence = props.presence,
      readOnly = props.readOnly;
  var _type$options = type.options,
      options = _type$options === void 0 ? {} : _type$options;

  var _React$useState = React.useState('write'),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      selectedTab = _React$useState2[0],
      setSelectedTab = _React$useState2[1];

  var _React$useState3 = React.useState(value),
      _React$useState4 = _slicedToArray(_React$useState3, 2),
      editedValue = _React$useState4[0],
      setEditedValue = _React$useState4[1];

  var debouncedValue = (0, _useDebounce.default)(editedValue, 100);
  var textarea = React.useRef(); // Conditionally update textarea styles based on read only access.
  // It's also possible to define inline styles via `childProps.textArea.style` on `<ReactMde />`,
  // but this will override any dynamically created styles provided by the component itself.

  React.useEffect(() => {
    if (textarea.current) {
      textarea.current.style.backgroundColor = readOnly ? 'rgba(240,240,240)' : 'rgba(255,255,255)';
    }
  }, [textarea]);
  React.useEffect(() => {
    setEditedValue(value);
  }, [value]);
  React.useEffect(() => {
    if (!debouncedValue && value) {
      onChange(_patchEvent.default.from([(0, _patchEvent.unset)()]));
    } else if (debouncedValue !== value) {
      onChange(_patchEvent.default.from([(0, _patchEvent.set)(debouncedValue)]));
    }
  }, [debouncedValue]);

  var saveImage = /*#__PURE__*/function () {
    var _ref = _wrapAsyncGenerator(function* (data) {
      var client = _client.default.withConfig({
        apiVersion: '2021-03-25'
      });

      var success = true;
      var result = yield _awaitAsyncGenerator(client.assets.upload('image', data).then(doc => "".concat(doc.url, "?w=450")).catch(() => {
        success = false;
        return "Error: Could not upload file. Only images are supported.";
      }));
      yield result;
      return success;
    });

    return function saveImage(_x) {
      return _ref.apply(this, arguments);
    };
  }(); // Generate a random ID to link our FormField label and input component


  var inputId = (0, _autoId.useId)();
  return /*#__PURE__*/React.createElement(_components.FormField, {
    description: type.description // Creates description from schema
    ,
    inputId: inputId // A unique ID for this input
    ,
    title: type.title // Creates label from schema title
    ,
    __unstable_markers: markers // Handles all markers including validation
    ,
    __unstable_presence: presence // Handles presence avatars

  }, /*#__PURE__*/React.createElement("div", {
    ref: ref
  }, /*#__PURE__*/React.createElement(_reactMde.default, {
    toolbarCommands: options['toolbar'] || defaultToolbarCommands,
    value: editedValue,
    onChange: setEditedValue,
    selectedTab: selectedTab,
    onTabChange: setSelectedTab,
    readOnly: readOnly,
    generateMarkdownPreview: markdown => Promise.resolve( /*#__PURE__*/React.createElement(Preview, {
      markdown: markdown
    })),
    childProps: {
      textArea: {
        id: inputId,
        onBlur,
        onFocus
      },
      writeButton: {
        tabIndex: -1
      }
    },
    paste: {
      saveImage
    },
    refs: {
      textarea
    }
  })));
});

exports.default = _default;
//# sourceMappingURL=Editor.js.map